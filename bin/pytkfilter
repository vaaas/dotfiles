#!/usr/bin/env python3

import sys
import os
import tkinter as tk
from tkinter.font import Font

class Application(tk.Frame):
	def __init__(self, master=None):
		super().__init__(master)
		self.master = master
		font = Font(family="Sans", size=24)
		self.pack(expand=1, fill="both")
		self.active_row = None

		self.listbox = tk.Listbox(self,
			selectmode=tk.MULTIPLE,
			font=font,
			activestyle="underline",
			height=20, width=40)
		self.listbox.bind("j", self.next_item)
		self.listbox.bind("k", self.previous_item)
		self.listbox.bind("m", self.mark_and_next_item)
		self.listbox.bind("u", self.unmark_and_next_item)
		self.listbox.bind("<Shift-M>", self.mark_and_previous_item)
		self.listbox.bind("<Shift-U>", self.unmark_and_previous_item)
		self.listbox.bind("<Return>", self.print_and_exit)
		self.listbox.bind("q", self.cancel)
		for line in sys.stdin.readlines():
			self.listbox.insert(tk.END, line.strip())
		self.listbox.pack(expand=1, fill="both")
		self.listbox.focus_force()

	def next_item(self, event):
		if (self.active_row == None):
			self.listbox.activate(0)
			self.active_row = 0
		elif (self.active_row < self.listbox.size() - 1):
			self.active_row += 1
			self.listbox.activate(self.active_row)

	def previous_item(self, event):
		if (self.active_row == None):
			self.listbox.activate(0)
			self.active_row = 0
		elif (self.active_row > 0):
			self.active_row -= 1
			self.listbox.activate(self.active_row)

	def mark(self):
		if self.active_row == None: return
		self.listbox.selection_set(self.active_row)

	def unmark(self):
		if self.active_row == None: return
		self.listbox.selection_clear(self.active_row)

	def mark_and_next_item(self, event):
		self.mark()
		self.next_item(None)

	def unmark_and_next_item(self, event):
		self.unmark()
		self.next_item(None)

	def mark_and_previous_item(self, event):
		self.mark()
		self.previous_item(None)

	def unmark_and_previous_item(self, event):
		self.unmark()
		self.previous_item(None)

	def print_and_exit(self, event):
		for index in self.listbox.curselection():
			print(self.listbox.get(index))
		self.master.destroy()
		exit(0)

	def cancel(self, event):
		self.master.destroy()
		exit(1)

root = tk.Tk()
app = Application(master=root)
app.mainloop()
