#!/usr/bin/env python3

import sys
import os
import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, Gdk

css = b"""
list { background-color: black; }
row {
        background-color: black;
        color: white;
        transition: none; }
row:selected {
        background-color: #333; }
row.vas-directory {
        font-weight: bold;
        color: #48D; }
row.vas-marked {
        color: white;
        font-style: oblique;
        background-color: #D44; }
row.vas-marked:selected { background-color: #D88; }
"""

def main():
        win = MainWindow()
        Gtk.main()

class MainWindow(Gtk.Window):
        def __init__(self):
                super().__init__()
                self.keybinds = {
                        "j": self.select_next,
                        "k": self.select_previous,
                        "m": self.mark_and_move_down,
                        "M": self.mark_and_move_up,
                        "u": self.unmark_and_move_down,
                        "U": self.unmark_and_move_up,
                        "l": self.mark_and_move_down,
                        "L": self.mark_and_move_up,
                        "h": self.unmark_and_move_down,
                        "H": self.unmark_and_move_up,
                        "q": self.cancel_and_exit,
                        "\r": self.print_and_exit
                }
                
                style_provider = Gtk.CssProvider()
                style_provider.load_from_data(css)
                Gtk.StyleContext.add_provider_for_screen(
                        Gdk.Screen.get_default(),
                        style_provider,
                        Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
                                
                scrolled_window = Gtk.ScrolledWindow()
                self.listbox = Gtk.ListBox()
                for line in sys.stdin.readlines():
                        line = line.strip()
                        self.listbox.add(Row(line))
                scrolled_window.add(self.listbox)
                self.add(scrolled_window)

                self.connect("key-press-event", self.on_key_press)
                self.connect("destroy", Gtk.main_quit)
                self.set_title("selectgtk")
                self.show_all()

        def select_next(self):
                self.listbox.do_move_cursor(self.listbox, Gtk.MovementStep(3), 1)
                        
        def select_previous(self):
                self.listbox.do_move_cursor(self.listbox, Gtk.MovementStep(3), -1)

        def mark(self):
                row = self.listbox.get_selected_row()
                if not row is None: row.select()

        def unmark(self):
                row = self.listbox.get_selected_row()
                if not row is None: row.unselect()
                
        def mark_and_move_down(self):
                self.mark()
                self.select_next()

        def mark_and_move_up(self):
                self.mark()
                self.select_previous()

        def unmark_and_move_up(self):
                self.unmark()
                self.select_previous()

        def unmark_and_move_down(self):
                self.unmark()
                self.select_next()

        def print_marked(self):
                for child in self.listbox.get_children():
                        if child.selected:
                                print(child.text)

        def print_and_exit(self):
                self.print_marked()
                self.destroy()
                sys.exit(0)

        def cancel_and_exit(self):
                self.destroy()
                sys.exit(1)

        def on_key_press(self, widget, event):
                try: self.keybinds[event.string]()
                except KeyError: pass

class Row(Gtk.ListBoxRow):
        def __init__(self, pathname):
                super().__init__()
                self.selected = False
                self.scontext = self.get_style_context()
                if os.path.isdir(pathname):
                        self.scontext.add_class("vas-directory")
                        pathname += "/"
                self.text = pathname
                label = Gtk.Label()
                label.set_text(pathname)
                label.set_xalign(0.0)
                
                self.add(label)

        def select(self):
                if self.selected: return
                self.selected = True
                self.scontext.add_class("vas-marked")

        def unselect(self):
                if not self.selected: return
                self.selected = False
                self.scontext.remove_class("vas-marked")

if __name__ == "__main__":
        main()
