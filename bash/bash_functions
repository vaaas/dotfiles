lgrep() {
	grep --color=always -C 10 -RFi -- "$@" | less -R
}

lls() {
	ls --color=always --group-directories-first -hl "$@" | less -RXF
}

g() {
	if test -z "$1"
	then
		git status
		return
	fi
	arg="$1"
	shift 1
	case "$arg" in
		d) git diff --patience "$@" ;;
		wd) git diff --word-diff --patience "$@" ;;
		ca) g a ./ && g co "$@" ;;
		co) git commit -m "$@" ;;
		a) git add "$@" ;;
		ai) g a $(git status -s | fzf -m | cut -c 4-) ;;
		b) git branch "$@" && g ch "$@" ;;
		oops) git reset HEAD^ ;;
		last) g d HEAD^ HEAD ;;
		wlast) g wd HEAD^ HEAD ;;
		c) git checkout "$@" ;;
		p) git push "$@" ;;
		P) git pull "$@" ;;
		clean)
			git fetch --depth=1
			git reflog expire --expire-unreachable=now --all
			git gc --aggressive --prune=all
			;;
	esac
}

m() {
	arg="$1"
	shift 1
	case $arg in
		s)
			cd ~/code/iotwebserver
			npm run watch &
			php artisan serve --host=0.0.0.0 &
			cd ~/code/athena
			./devrun.sh &
			cd ~/code/moduleserver
			./devrun.sh &
			;;
		emacs) killall emacs && \emacs --daemon ;;
		vars) grep -o -P 'V.[a-zA-Z0-9_]+' -- "$@"  | sort | uniq ;;
	esac
}

a() {
	arg="$1"
	shift 1
	case "$arg" in
		s) pacman -Ss --color auto "$@" ;;
		i) s pacman -S --color auto "$@" ;;
		r) s pacman -Rns --color auto "$@" ;;
		update) s pacman -Sy --color auto ;;
		upgrade) s pacman -Su --color auto ;;
		info) pacman -Sii --color auto "$@" ;;
		depends) pacman -Sii --color auto "$@" | grep 'Depends On' ;;
		rdepends) pacman -Sii --color auto "$@" | grep "Required By" ;;
		clean) s pacman -Scc --color auto ;;
		file-search) pacman -Fs --color auto "$@" ;;
		installed) pacman -Qe --color auto ;;
		size) LC_ALL=C pacman -Qi | awk '/^Name/{name=$3} /^Installed Size/{print $4$5, name}' | sort -h ;;
	esac
}

sha3-rename() {
	for x
	do
		file="$(basename "$x")"
		if ! test -f "$file"
		then
			exit 1
		fi
		name="$(rhash --sha3-256 -- "$file" | cut -d' ' -f 1)"
		ext="$(basename "$file")"
		ext="${ext##*.}"
		mv -vi -- "$file" "$name.$ext"
	done
}

vas-transcode() {
	ffmpeg -i "$1" -c:s copy -c:a libmp3lame -q:a 4\
		-c:v libx264 -crf 25 -preset ultrafast -tune animation -pix_fmt yuv420p\
		-map 0:v -map 0:t? -map 0:s? -map 0:a:0\
		"$2"
}

word-frequency() {
	tr '[:upper:]' '[:lower:]' |
	tr -d '[:punct:]' |
	tr -s '[:space:]' '\n' |
	sort |
	uniq -c |
	sort -n
}

letter-frequency() {
	tr '[:upper:]' '[:lower:]' |
	tr -d '[:punct:]' |
	tr -s '[:space:]' '\n' |
	fold -w1 |
	sort |
	uniq -c |
	sort -n
}

remove-if-same() {
	if ! test -d "$1" -a -f "$2"
	then
		echo "bad arguments" > /dev/stderr
		return
	fi
	src="$2"
	dst="$1/$(basename "$src")"
	if diff -q -- "$src" "$dst"
	then
		echo "$src and $dst are the same"
		rm -v -- "$src"
	fi
}

c() {
	test -n "$1" && cd "$1"
	while true
	do
		a="$(\ls -pd --color=always --group-directories-first -- * . .. | fzf --ansi --prompt="$PWD > " | sed 's/\x1b\[[0-9;]*m//g')"
		if test -z "$a" -o "$a" = './'
		then break
		elif test -d "$a"
		then cd "$a"
		elif test -f "$a"
		then gio open "$a"
		fi
	done
}

d() {
	if test -z "$1"
	then
		systemctl
		return
	fi
	arg="$1"
	shift 1
	case "$arg" in
		r) s systemctl restart "$@" ;;
		e) s systemctl enable "$@" ;;
		d) s systemctl disable "$@" ;;
		s) systemctl status "$@" ;;
		a) s systemctl start "$@" ;;
		p) s systemctl stop "$@" ;;
		j) journalctl "$@" ;;
	esac
}
