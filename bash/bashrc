PS1='\u@\h:\[\e[1;34m\]$PWD \[\e[1;31m\]$?\[\e[0m\] > '
IFS='
'
eval $(dircolors -b)

set -o noclobber
shopt -s histappend
shopt -s histverify

#aliases
#safety
alias cp='cp -vri --'
alias mv='mv -nvi --'
alias rm='gio trash --'
alias rmdir='rmdir -v --'
alias ln='ln -i --'
alias lns='\ln -is --'
alias e='aunpack -e --'
alias ncdu='ncdu -rx'

#nice colours & formatting
alias diff='git diff'
alias ls='ls --color=auto --group-directories-first'
alias df='df -h'
alias du='du -ch'
alias chmod='chmod -c'
alias chown='chown -c'
alias chgrp='chgrp -c'
alias saidar='saidar -c'
alias top='htop'
alias uptime='uptime -p'
alias nmcli='nmcli -f in-use,ssid,bssid,signal,bars'
alias cmark='cmark --smart'

#convenience & shortcuts
alias s='sudo'
alias ..='cd ..'
alias ,='cd $OLDPWD'
alias linkgrep='grep -oP "http(s?):\/\/[^\"\(\)\<\>]*"'
alias mkdir='mkdir -pv'
alias bb='systemctl poweroff'
alias brb='systemctl reboot'
alias f='find -maxdepth 1 | grep -Fi'
alias fp='find -maxdepth 1 | fzf'
alias ff='find | grep -Fi'
alias q='exit'
alias clipin='xclip -selection clipboard'
alias clipout='xclip -selection clipboard -o'
alias clipsync='xclip -selection primary -o | xclip -selection clipboard'
alias lvds='xrandr --auto'
alias ldir='find . -maxdepth 1 -type d'
alias allfiles='find -type f'
alias powersave='sudo cpupower frequency-set -g powersave'
alias performance='sudo cpupower frequency-set -g performance'
alias serve='unhorribad_serve.js'
alias ymddate='date +%Y-%m-%d'
alias pkgin='sudo aptitude install'
alias pkgrm='sudo aptitude remove'
alias pkgf='aptitude search'
alias bc='bc -l'
alias update='sudo sh -c "a update && a upgrade"'
alias zz='systemctl suspend'
alias emacs='emacsclient -nc'
alias less='less -I'
alias sxiv='sxiv -o'
alias pg='ping google.gr'
alias windows='sudo grub-reboot Windows && sudo reboot'
alias thanks="echo You\'re welcome!"
alias set-time="sudo ntpdate pool.ntp.org ; sudo hwclock -w"

#functions
lgrep() {
	grep --color=always -C 10 -RFi -- "$@" | less -R
}

lls() {
	ls --color=always --group-directories-first -hl "$@" | less -RXF
}

g() {
	if test -z "$1"
	then
		git status
		return
	fi
	arg="$1"
	shift 1
	case "$arg" in
		d) git diff --patience "$@" ;;
		wd) git diff --word-diff --patience "$@" ;;
		ca) git commit -am "$@" ;;
		co) git commit -m "$@" ;;
		a) git add "$@" ;;
		ai) g a $(git status -s | fzf -m | cut -c 4-) ;;
		b) git branch "$@" && g ch "$@" ;;
		oops) git reset HEAD^ ;;
		last) g d HEAD^ HEAD ;;
		wlast) g wd HEAD^ HEAD ;;
		c) git checkout "$@" ;;
		p) git push "$@" ;;
	esac
}

m() {
	arg="$1"
	shift 1
	case $arg in
		s)
			cd ~/code/iotwebserver
			xterm -e 'npm run watch' &
			xterm -e 'php artisan serve' &
			cd ~/code/athena
			xterm -e 'php -S localhost:8001 -t public' &
			exit ;;
	esac
}

a() {
	arg="$1"
	shift 1
	case "$arg" in
		s) pacman -Ss --color auto "$@" ;;
		i) s pacman -S --color auto "$@" ;;
		r) s pacman -Rns --color auto "$@" ;;
		update) s pacman -Sy --color auto ;;
		upgrade) s pacman -Su --color auto ;;
		info) pacman -Sii --color auto "$@" ;;
		depends) pacman -Sii --color auto "$@" | grep 'Depends On' ;;
		rdepends) pacman -Sii --color auto "$@" | grep "Required By" ;;
		clean) s pacman -Scc --color auto ;;
		file-search) pacman -Fs --color auto "$@" ;;
		installed) pacman -Qe --color auto ;;
		size) LC_ALL=C pacman -Qi | awk '/^Name/{name=$3} /^Installed Size/{print $4$5, name}' | sort -h ;;
	esac
}

sha3-rename() {
	for x
	do
		file="$(basename "$x")"
		if ! test -f "$file"
		then
			exit 1
		fi
		name="$(rhash --sha3-256 -- "$file" | cut -d' ' -f 1)"
		ext="$(basename "$file")"
		ext="${ext##*.}"
		mv -vi -- "$file" "$name.$ext"
	done
}

vas-transcode() {
	ffmpeg -i "$1" -c:s copy -c:a libmp3lame -q:a 4\
		-c:v libx264 -crf 25 -preset ultrafast -tune animation -pix_fmt yuv420p\
		-map 0:v -map 0:t? -map 0:s? -map 0:a:0\
		"$2"
}

word-frequency() {
	tr '[:upper:]' '[:lower:]' |
	tr -d '[:punct:]' |
	tr -s '[:space:]' '\n' |
	sort |
	uniq -c |
	sort -n
}

remove-if-same() {
	if ! test -d "$1" -a -f "$2"
	then
		echo "bad arguments" > /dev/stderr
		return
	fi
	src="$2"
	dst="$1/$(basename "$src")"
	if diff -q -- "$src" "$dst"
	then
		echo "$src and $dst are the same"
		rm -v -- "$src"
	fi
}

c() {
	while true
	do
		a="$(\ls -pd --color=always --group-directories-first -- * . .. | fzf --ansi --prompt="$PWD > " | sed 's/\x1b\[[0-9;]*m//g')"
		if test -z "$a" -o "$a" = './'
		then break
		elif test -d "$a"
		then cd "$a"
		elif test -f "$a"
		then gio open "$a"
		fi
	done
}
